// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
	output   = "./"
	outputName = "schema.dbml"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Photo {
	id               String @id @default(auto()) @map("_id") @db.ObjectId
	// information de base
	imagePath        String @unique
	title 					 String
	description			 String
	// description du contexte de prise de vue
	device           String
	exposure         String
	shutterSpeed     String
	aperture         String
	iso              String
	location         String
	date             DateTime
	// information pour l'adminitration
	views						 Int @default(0)
	isVisible        Boolean
}

model Edit {
	id 						 String @id @default(auto()) @map("_id") @db.ObjectId
	// information de base
	imagePath        String @unique
	title 					 String
	description			 String
	// infomation sur le traitement de l'image
	software         String
	// information pour l'adminitration
	isVisible        Boolean
	views						 Int @default(0)
}

model Project {
	id            String @id @default(auto()) @map("_id") @db.ObjectId
	// information de base
	title         String @unique 
	description   String
	context       String // contexte de travail : projet de cours, perso, entreprise ...
	date          DateTime @default(now()) // date de lancement du projet
	type 				  String // type de projet : site web, application mobile, jeu vidéo, ...
	// miniatures
	thumbnailImage     String // url de l'image de présentation du projet
	thumbnailVideo		 String? // url de la vidéo de présentation du projet
	coverImage				 String // url de l'image de couverture du projet
	// contenu du projet
	bannersUrls   String[] // urls des bannières du projet
	tools         ToolInProject[]
	workers       WorkerInProject[]
	assets        String[] // urls des assets du projet : vidéos, lien vers le site, ...
	// information pour l'adminitration
	views   Int @default(0)
	isVisible     Boolean
	// gestion des commentaires (bêta)
	comments      Comment[]
}

model ToolInProject {
	id           String @id @default(auto()) @map("_id") @db.ObjectId
	tool         Tool @relation(fields: [toolId], references: [id])
	toolId       String @db.ObjectId
	project      Project @relation(fields: [projectId], references: [id])
	projectId    String @db.ObjectId
}

model Tool {
	id           String @id @default(auto()) @map("_id") @db.ObjectId
	name         String @unique // nom de l'outil
	icon         String // svg de l'outil /!\ dangerosité de l'entrée
	projects     ToolInProject[]
}

model WorkerInProject {
	id           String @id @default(auto()) @map("_id") @db.ObjectId
	worker       Worker @relation(fields: [workerId], references: [id])
	role			 	 String @default("")
	workerId     String @db.ObjectId
	project      Project @relation(fields: [projectId], references: [id])
	projectId    String @db.ObjectId
}

model Worker {
	id           String @id @default(auto()) @map("_id") @db.ObjectId
	name         String
	firstName    String 
	linkedInUrl  String 
	websiteUrl   String?
	projects     WorkerInProject[]
}

model Article {
	id            String @id @default(auto()) @map("_id") @db.ObjectId
	title         String @unique
	image         String // url
	tags          String[]
	content       String // contenu de l'article stocké en markdown
	views 			  Int @default(0)
	createAt      DateTime @default(now())
	updateAt      DateTime @default(now())
	// gestion des commentaires (bêta)
  comments      Comment[]
}

model Comment {
	id          String @id @default(auto()) @map("_id") @db.ObjectId
	// contenu
	content     String
	createAt    DateTime @default(now())
	updateAt    DateTime @default(now())
	// gestion des relations (article OU projet)
  Article     Article? @relation(fields: [articleId], references: [id])
  articleId   String? @db.ObjectId
	Project     Project? @relation(fields: [projectId], references: [id])
	projectId   String? @db.ObjectId
	// gestion de l'utilisateur
	User        GithubUser? @relation(fields: [userId], references: [id])
	userId      String? @db.ObjectId
}

model GithubUser {
	id          String @id @default(auto()) @map("_id") @db.ObjectId
	username    String @unique
	avatarUrl   String
	name        String
	comments    Comment[]
}


model Registered {
	id          String @id @default(auto()) @map("_id") @db.ObjectId
	email       String @unique
	createAt    DateTime @default(now())
	verified	Boolean @default(false)
	verifyToken String? @unique
}

model Contact {
	id          String @id @default(auto()) @map("_id") @db.ObjectId
	email       String 
	name        String
	message     String
	createAt    DateTime @default(now())
}

model Tech {
	id          String @id @default(auto()) @map("_id") @db.ObjectId
	name        String @unique
	icon        String
	colorHue		String
	colorSat		String
	colorLight	String
	visible			Boolean @default(true)
	type				String @default("other")
}

model Legal {
	id					String @id @default(auto()) @map("_id") @db.ObjectId
	title				String @unique
	slug				String @unique
	content			String
	updateAt		DateTime @default(now())
}